#include "tinyPTC/tinyptc.h"
#include <iostream>
#include <memory>

typedef u_int32_t uint32_t;

constexpr uint32_t Kg = 0x0000FF00; //constexpr calcula en tiempo de compilaciÂ´on. 
constexpr uint32_t Kr = 0x00FF0000;
constexpr uint32_t Kb = 0x000000FF;
constexpr uint32_t KSCRWEIGHT = 640;
constexpr uint32_t KSCRHEIGHT= 360 ;





uint32_t sprite[4*4] = {
	Kr,Kb,Kb,Kb,
	Kb,Kr,Kb,Kb,
	Kb,Kb,Kr,Kb
};

/**
 * @brief execute main 
 * 
 */
void execute(){
	ptc_open("wi",640,360);

	const uint32_t *psrite = sprite;

    auto screen = std::make_unique<uint32_t[]>(KSCRHEIGHT*KSCRWEIGHT);
	//Para recorrer el sprite, lo hacemos meidante punteros para mejorar la velocidad 

	while(!ptc_process_events()){
		for(uint32_t i = 0; i<(640*360) ; ++i)
		{
			
			screen[i] = 0x000000FF;

		}
		uint32_t *pscreen  = screen.get();
		psrite = sprite;
		for(uint32_t i = 0; i< 4 ; ++i)
		{
			for(uint32_t j = 0; j<4 ; ++j){

				*pscreen = *psrite;
				++pscreen;
				++psrite;

			}//una fila del sprite se ha rellenado, ahora toca rellenar la columnas
			pscreen += 640 - 4;
		}
		
		ptc_update(screen.get());
	}

    ptc_close();


}

int f(){
	
	try{
		execute();
	}
	catch(...){
		std::cout << "not execute error \n";
	}

	return 0 ; 
}